\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename blueshift.info
@settitle blueshift
@afourpaper
@documentencoding UTF-8
@documentlanguage en
@finalout
@c %**end of header


@dircategory System Administraction
@direntry
* spike: (spike).                    GNU/Pony's standard package manager
@end direntry


@copying
Copyright @copyright{} 2014  Mattias Andrée

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@node Top
@top spike -- GNU/Pony's standard package manager
@insertcopying
@end ifnottex

@titlepage
@title spike
@subtitle GNU/Pony's standard package manager
@author by Mattias Andrée (maandree)

@page
@center `Never fear! Spike, your number one assistant, is here!'
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents



@menu
* Overview::                        Brief overview of @command{spike}.
* Invoking::                        Invokation of @command{spike}.
* I_USE-flags::                     Customising packages.
* Scroll specifications::           How a scroll is structured.
* GNU Free Documentation License::  Copying and sharing this manual.
@end menu
@c TODO repositories and categories



@node Overview
@chapter Overview

@c Based on Hoofbook section 7.1 [What are software packages?]
Software packages is a concept this is very popular for
Free Software operating systems and distributions. Software
packages are basically scripts with instructions for
downloading and installing specific programs. With a program
called a package manager, uninstallation, conflicts,
dependencies and updates can be handled in addition to
installations. Package managers also gives you a method for
finding and installing programs you may be interested in.
Distributions such as GNU/Linux have collections of packages
in what are called package repositories. These are often
called ports trees if they are downloaded to the users
rather than remotely queried. @command{spike} is the
standard package manager for GNU/Pony.



@node Invoking
@chapter Invoking

@menu
* Miscellaneous options::           Miscellaneous invocation of @command{spike}.
* Package maintenance::             Using @command{spike} for package maintenance.
* Finding packages::                Using @command{spike} to find packages.
* Installing packages::             Installing, uninstalling and updating packages.
* Database manipulation::           Manipulation the package database.
* Snapshotting::                    Archiving and rolling back stable system states.
@end menu


@command{spike}@footnote{Or @command{owlowiscious} if you
prefer.} invocation syntax consists of a master option and a
set of slave options. At most one master option can be used
at one invocation of @command{spike}, and the slave options
that are available depend upon that master option. The order
of the options does not matter.

Some master options support the slave option @option{--shred}.
If @option{--shred} is used, @command{spike} will use the
command @option{shred} when removing old data. This can be
used to make old data unrecoverable@footnote{Does not work on
copy-on-write filesystems unless @option{shred} is patch to
be aware of the filesystem.} @command{spike} will also try to
make sure that @option{shred} is used instead of @option{rm}
and @option{unlink} by external commands.


@node Miscellaneous options
@section Miscellaneous options

@table @option
@item --
Treat all following arguments as if they did not
start with `-' or `+'.

@item ++
Treat the next argument as if it did not start
with `-' or `+'.

@item --help
@itemx -h
Display invocation help.

@item --version
@itemx -v
Print the version of @command{spike} that is being used.

@item --copyright
@itemx -c
Display copyright information about @command{spike}.

@item [--interactive] [--shred]
@itemx [-I] [--shred]
Start interactive graphical terminal mode. In this mode
you will be able to install and uninstall packages.

@item --ride SCROLL [--private]
@itemx -X SCROLL [-u]
Use a scroll's instructions to execute a package.
Executing packages without additional instructions
is often not that easy if it does not contain exactly
one program or a program without a graphical user
interface, or graphical terminal user interface.
Because of this many scrolls will instruct spike to
open documentation for the package to help you figure
out how to use the package.
@end table


@node Package maintenance
@section Package maintenance

@table @option
@item --sha3sum FILE...
@itemx -3 FILE...
Calculate SHA3 checksums for files to use in scrolls,
do not except the files to be returned in order.

All arguments not starting with `-' or `+' will be
treated as files whose checksum should be calculated.

This option makes @command{spike} calculate checksums
for files using Keccak with the configurations that
@command{spike} scrolls uses to verify that downloaded
source files are the expected source file. It is recommend
to use this rather than a regular @command{sha3sum}
command because of the risk that the configurations may
be incorrect otherwise. If you install
@command{spike-ckeccak} @command{spike} will use a
libexec program written in C optimised and hardcoded
to use @command{spike}'s configurations.

@item --proofread SCROLL...
@itemx -P SCROLL...
Verify that scrolls are correct.

All arguments not starting with `-' or `+' will be treated
as scrolls of which to verify the correctness,

Please use this before submitting a package to the repository.
@end table


@node Finding packages
@section Finding packages

@table @option
@item --find SCROLL... [--written (y|yes|n|no)]
@itemx -F SCROLL... [-w (y|yes|n|no)]
List all scrolls whose name matches the seeked
names specifed by any argument not starting with
`-' or `+', with the exception of the value
associated with @option{-w} (@option{--written}).

If @option{-w} (@option{--written}) is used,
restrict the found scrolls to either installed
scrolls (when the associated value is either
@option{y} or @option{yes}) or to scroll that
have not been installed (when the associated
value is either @option{n} or @option{no}.)

The seeked names are treated as regular expressions.
Additionally, these are splitted into three parts:
the repository, the category and the package name.
The pars are delimited by slashes, any missing part
is treated as a wildcard: anything is accepted.
For example:

@table @code
@item package
@itemx /package
@itemx //package
Only look for packages whose name contain `package'
in any category, in any repository.

@item ^package
Only look for packages whose name starts with `package'
in any category, in any repository.

@item ^a.*z$
Look for packages whose name starts with `a' and ends
with 'z', in any category, in any repository.

@item category/package
@itemx /category/package
Only look for packages whose name contain `package',
in any repository, restricted to categories whose
name contain `category'.

@item category/
@itemx /category/
List all packages in any category whose name contains
`category', for all repositories.

@item repository/category/package
List packages whose name contain `package', in
respositories whose name contain `repository',
with restriction to categories whose name
contain `category'.

@item repository//package
List packages whose name contain `package', in
respositories whose name contain `repository',
with restrictions on the category.

@item repository/category/
List all packages, in any category whose name contains
`category', for repositories whose name contain
`repository'.

@item repository//
List all packages, in any category, for repositories
whose name contain `repository'.
@end table

If no patterns@footnote{Or an empty pattern, or a pattern
containing only slashes.} have been specified, all scrolls
will be listed.

@item --find --owner FILE...
@itemx -F -o FILE...
List all packages which has ownership of a file or
directory. Files can be owned by multiple packages,
but should only be owned by one package. Directories
may be owned by multiple packages without @command{spike}
complaining. The reason for this that all package will
install files to system directories such as @file{/usr}
and those have ownership over such directories.

Only installed packages are candidate for inclusion
in the result. @command{spike} does not know what files
a scroll will install, only what it has installed.

All arguments not starting with `-' or `+' will be
treated as files whose owner should be identified.

@item --read --list SCROLL...
@itemx -R -l SCROLL...
List all files and directories owned by the specified
scrolls. If no scroll has ben specified, all files and
directories under package maintenance will be listed.

All arguments not starting with `-' or `+' will be
treated as scrolls to inspect.

@item --read SCROLL... [--info FIELDS]... [--written (y|yes|n|no)]
@itemx -R SCROLL... [-f FIELDS]... [-w (y|yes|n|no)]
Read metainformation about a scroll. If @option{-f}
(@option{--info}) is not used, all metainformation
will be listed, otherwise it will be restricted to
the specified metainformation. This metainformation
include:

@option{-f} (@option{--info}) can be used multiple
times, but the associated value can also be a
comma-separated list of values.

@table @code
@item FIXME
@end table

All arguments not starting with `-' or `+', and not
associated with @option{-f} (@option{--info}) or
@option{-w} (@option{--written}), will be treated as
scrolls to inspect.

If @option{-w} (@option{--written}) is used,
restrict to either installed scrolls (when the
associated value is either @option{y} or
@option{yes}) or to scroll that have not been
installed (when the associated value is either
@option{n} or @option{no}.)

@item --example-shot [--viewer VIEWER] [--all-at-once] SCROLL...
@itemx -S [--viewer VIEWER] [-a] SCROLL...
Open the example-shot assocated with a scroll.

All arguments not starting with `-' or `+', and not
associated with @option{--viewer} or @option{-a}
(@option{--all-at-once}), will be treated as scrolls
whose example-shots should be displayed.

Few scrolls have an example-shot, a rule of thumb
is that only fonts and themes have example-shots.
The purpose if example-shots is not to display how
a programs looks but rather to describe the package
graphically. Describing a purily visible package
is best done with graphics, graphics is however
ineffective and a waste of space to do with functional
packages. If you are looking for new fonts or toolkit
themes a description would seldom be enough but a
screenshot could be very useful.

If you are not happy with the default image viewer,
you can use the option @option{--viewer} to specify
which command @command{spike} should use to open an
PNG file.

If @option{-a} (@option{--all-at-once}) is used,
@command{spike} will open all example shots in one
execution rather than opening them one-by-one as
you close the image viewer.
@end table


@node Installing packages
@section Installing packages

@table @option
@item --bootstrap [--no-verify]
@itemx -B [--no-verify]
Update @command{spike} and the package repository.
This is done at the same time because their is no
sense is only updating one of them because changes
in once of them may, especially when @command{spike}
is mature, cause a change in the other. Their
development of often mutually dependent.

All commits are digitally signed to assure that you
are not being attacked. If you want to disable
verification of the digital signatures and enforcement
of their inclusion, use the option @option{--no-verify}.
Disabling verification is highly discourage.

However, unstable commits to @command{spike} are not
necessarily signed.

@item --write SCROLL... [--pinpal ROOT | --private] [OPTION...]
@itemx -W SCROLL... [--pinpal ROOT | -u] [OPTION...]
Install a new packages or update, downgrade or reinstall
an already installed packages.

All arguments not starting with `-' or `+', and not
associated with @option{--pinpal}, will be treated as
scrolls to install.

If their for some reason are scrolls with the same name,
perhaps you added additional repositories or frooze
a repository. You an explicity tell @code{spike} what
repository to install the package from and even which
category it is in. This is done by utilising the @code{spike}
has three parts of a package name: repository, category
and scroll, that are slash-delimited. For example:

@table @code
@item package
@itemx /package
@itemx //package
Install the package named `package'.

@item category/package
@itemx /category/package
Install the package named `package' located in the
category `category'.

@item repository//package
Install the package named `package' from the
repository `repository.

@item repository/category/package
Install the package named `package' located in the
category `category' from the repository `repository.
@end table

You can install package to another system. This is intended
for install a new system. This is done by adding the option
@option{--pinpal} and specifying that system's root
directory's mountpoint on your current system. For example,
if system you are installing has its @file{/} directory
mounted on the installation system's @file{/mnt}, use the
arguments @option{--pinpal /mnt}. This can also be used
for repairing a broken system, but will probably seldom
be used for it.

If you are not installing to another system you may choose
to make a user-private installation rather than a system-wide
installation by using the option @option{-u}
(@option{--private}). Some package cannot be installed this
way. Particularly, packages installing command owned by root
with setuid set should not be possible to install this way
because you would not be able to execute it properly.
There are also edge-cases such as the kernel and
initialisation systems that cannot be installed this way
either because it can only be execute before the user logs
in.

When using @option{-W} (@option{--write}), there are a
few additionally optional options you can use:

@table @option
@item --asdep | --asexplicit
By default a package is installed as explicitly installed
unless it is already installed as installed as a dependencies.
This can be overridden by using either @option{--asdep} or
@option{--asexplicit}. Using @option{--asdep} will flag the
installed packages as installed as a dependencies. This means
that if there is no package dependent upon that package installed,
it will be removed when cleaning the system from unneeded
packages. Using @option{--asexplicit} will flag the installed
packages as explicitly installed. This means that if a package
was already installed as a dependency it will no longer
be removed when cleaning the system from unneeded packages.

@item --nodep
Ignore dependencies, install the package without installing
any of its dependencies.

@item --force
Do not stop the user from doing something potentially stupid.
Use of @option{--asdep} or @option{--nodep} is potentially
stupid, but is allowed without using @option{--force}.

@item --shred
Remove old data by executing @command{shred}.
@end table

@item --erase SCROLL... [--pinpal ROOT | --private] [--shred]
@itemx -E SCROLL... [--pinpal ROOT | -u] [--shred]
Uninstall listed packages.

All arguments not starting with `-' or `+', and not
associated with @option{--pinpal}, will be treated as
scrolls to uninstall.

You can uninstall packages from another system. This is
intended for removing packages accidentally installed
when installing a new system. This is done by adding the
option @option{--pinpal} and specifying that system's root
directory's mountpoint on your current system. For example,
if system you are installing has its @file{/} directory
mounted on the installation system's @file{/mnt}, use the
arguments @option{--pinpal /mnt}. This can also be used
for repairing a broken system, but will probably seldom
be used for it.

If you are not uninstalling from another system you may choose
to make a user-private uninstallation rather than a system-wide
uninstallation by using the option @option{-u}
(@option{--private}). This can only be done on packages that
are installed as user-private packages.

@item --update [--pinpal ROOT | --private] [--ignore SCROLLS]... [--shred]
@itemx -U [--pinpal ROOT | -u] [-i SCROLLS]... [--shred]
Upgrade or downgrade installed packages. Package
downgrading is only done if you checkout an older
revision of a repository.

You can update another system. This is intended for
repairing a broken system be downgrading all packages.
This is done by adding the option @option{--pinpal} and
specifying that system's root directory's mountpoint on
your current system. For example, if system you are
updating has its @file{/} directory mounted on the
reparation system's @file{/mnt}, use the arguments
@option{--pinpal /mnt}.

If you are updating another system you may choose
do an update on user-private package rather than
system-wide package by using the option @option{-u}
(@option{--private}).

You can choose to ignore updates for a set of
packages. This is done by listing them with
the option @option{-i} (@option{--ignore}).

@option{-i} (@option{--ignore}) can be used multiple
times, but the associated value can also be a
comma-separated list of values.

@item --clean [--private] [--shred]
@itemx -N [-u] [--shred]
Uninstall packages that are installed as dependencies
and are no longer, transversely, required by any
explicitly installed package.

The option @option{-u} (@option{--private}) can be
used to remove user-private packages rather than
system-wide packages.
@end table


@node Database manipulation
@section Database manipulation

@table @code
@item --demote SCROLL... [--private]
@itemx --demote SCROLL... [-u]
Flag a package as installed as installed as a dependency.
This is similar to reinstalling a package using
@option{--write --asdep}, the difference is, the package
will not be compiled or reinstalled, only reflagged in
the database.

All arguments not starting with `-' or `+'  will be
treated as scrolls to demote.

The option @option{-u} (@option{--private}) can be
used to demote user-private packages rather than
system-wide packages.

@item --promote SCROLL... [--private]
@itemx --promote SCROLL... [-u]
Flag a package as installed as a explicitly installed.
This is similar to reinstalling a package using
@option{--write --asexplicit}, the difference is,
the package will not be compiled or reinstalled, only
reflagged in the database. premote package to an
explicitly installed package

All arguments not starting with `-' or `+'  will be
treated as scrolls to promote.

The option @option{-u} (@option{--private}) can be
used to promote user-private packages rather than
system-wide packages.

@item --claim FILE... [--recursive | --entire] [--force] [--private] SCROLL
@itemx -C FILE... [--recursive | --entire] [--force] [-u] SCROLL
Mark files as owned by a specified scroll. If the scroll
does not exist it will be added to the database.

You could for example specify the scroll `scroll'

All arguments not starting with `-' or `+'  will be
treated as files to claim and, the last one, as the
package those files should belong to.

If a non-directory file is already owned by a package,
the option @option{--force} must be used.

The option @option{-u} (@option{--private}) can be
used to rather to a user-private package rather than
a system-wide package.

Using @option{--recursive} will add all subfiles and
subdirectories of the selected directories to be claimed.

Using @option{--entire} will claim the file or directory
and any future subfiles and subdirectories.

@option{--recursive} and @option{--entire} cannot
be combined. If neither is used, only the listed
files and directories will be claim, but none of
their subfiles and subdirectories.

@item --disclaim FILE... [--recursive] [--private] SCROLL
@itemx -D FILE... [--recursive] [-u] SCROLL
Make files as not owned by a scroll.

All arguments not starting with `-' or `+'  will be
treated as files to disclaim and, the last one, as the
package those files should belong to.

The option @option{-u} (@option{--private}) can be
used to rather to a user-private package rather than
a system-wide package.

Using @option{--recursive} will add all subfiles and
subdirectories of the selected directories to be
disclaimed.

Claimed by recursion with @option{--entire} will be
disclaimed once none of its superdirectories are
claimed with @option{--entire}.
@end table


@node Snapshotting
@section Snapshotting

@table @code
@item --archive [--scrolls] ARCHIVE
@itemx -A [-s] ARCHIVE
Create an archive of everything that is installed.

If @option{--scrolls} is used, only the scroll versions
and file claims are stored and used at restore.

The only argument not starting with `-' or `+' will be
treated as the pathname to use for the archive that is
created.

@item --restore-archive ARCHIVE [OPTION...]
Rollback the system to a snapshot created with
@option{-A} (@option{--archive}).

The only argument not starting with `-' or `+' will be
treated as the pathname of the archive.

When using -W (--write), there are a few additionally
optional options you can use:

@table @option
@item --shared | [--full] | --old
By using the option @option{--shared} you can restrict
the reverted packages to packages that are both currently
installed and included in the archive.

Alternatively you can use @option{--old} to restrict to
package that are included in the archive but is not
currently installed.

@option{--full}, which is implied if neither is used, can
be used to revert or reinstall all packages that are
included an in archive and uninstall package that are not
included in the archive.

@item --downgrade | --upgrade
By default, packages are reverted without regarding their
version. However, you can use either @option{--downgrade}
or @option{--upgrade} to restrict to packages that are
being downgraded or upgrade, respectively.

@item --shred
Remove old data by executing @command{shred}.
@end table
@end table



@node I_USE-flags
@chapter I_USE-flags

I_USE-flags are environment variables used to customise
package. I_USE-flags can be global or package-private.
I_USE-flags can for example be used to specify what
document format to install or what toolkit the program
such be complied to use.

The scrolls choose freely what I_USE-flag that support,
and any non-supported I_USE-flag is simply ignored. It
is also up to the scrolls to choose how they want to
interpret the I_USE-flags and what their default values
should be. This chapter however sets up guildlines that
the scrolls should do their best to follow.

Many flags are booleanic, they can either be true or false.
Booleanic should be interpreted as true if and only if
the value starts with a `y' or a `Y', and false if and
only if the value starts with an `n' or an `N'.

Standard booleanic I_USE-flags include:

@table @env
@item I_USE_INFO
If set to true, the scroll should install @command{info}
manuals if available.

@item I_USE_PDF
If set to true, the scroll should install manuals
compiled to Portable Document Format documents if possible.

@item I_USE_DVI
If set to true, the scroll should install manuals
compiled to Device Independent File Format documents if
possible.

@item I_USE_PS
If set to true, the scroll should install manuals
compiled to PostScript documents if possible.

@item I_USE_HTML
If set to true, the scroll should install manuals
compiled to Hypertext Markup Language documents if possible.

@item I_USE_MAN
If set to true, the scroll should install @command{man}
manuals if available.

@item I_USE_MAN_ES
If set to true, the scroll should install @command{man}
manuals in Spanish (language code `es') if available.

@item I_USE_MAN_JP
If set to true, the scroll should install @command{man}
manuals in Japanese (language code `jp') if available.

@item I_USE_SKEL
If set to true, the scroll should install configuration
files @file{/etc/skel} if their are any candidates
for this.

@item I_USE_BASH
If set to true, the scroll should install @command{bash}
tab-completion scripts for package's commands
if possible.

@item I_USE_ZSH
If set to true, the scroll should install @command{zsh}
tab-completion scripts for package's commands
if possible.

@item I_USE_FISH
If set to true, the scroll should install @command{fish}
tab-completion scripts for package's commands
if possible.

@item I_USE_TTY
If set to true, the user's of the system does not
use a graphic environment and the scroll should
avoid installing resources and commands that have
no use from the TTY.
@end table

Similar to booleanic flags, I_USE-flags can also be
tristate flags. One example of this is the standard
I_USE-flag @env{I_USE_CLOSE_AS_ICONIFY}:

@table @env
@item I_USE_CLOSE_AS_ICONIFY
When the value of this flag starts with a `y' or a
`Y', the graphical programs should save their state
and run in the background in some edge-case. However,
if the value starts with an `n' or an `N' this should
not be done. If the value starts with an `a' or an
`A' (for `auto') the program should try to determine
this be looking at environment variables such as the
what desktop environment is used.
@end table

Some flags however are text strings.
Standard string-I_USE-flags include:

@table @env
@item I_USE_BOOTDIR
If set to `normal', a seperate @file{/boot} directory
is available on the system, if the flag is set to `flat'
@file{/boot} is a symbolic link to @file{/}. If however
the value is `none' their is no @file{/boot} directory
on the system.

@item I_USE_SH
The POSIX shell provider you use on your system, for
example @command{bash} or @code{dash}. `a:b' means the
command @command{b} that is provided by the package
@command{a}, `c' is shorthand for `c:c'. Scrolls should
avoid using this flag; however, if the the select
should has a function difference it should be respected.

For example, the @command{gates-of-tartaros} uses this
flag to select which shell to use its command's
(@command{got}) shebang. This affects how you configure
@command{got} as you do it in the same shell script
language is @command{got} is running under.
@end table

I_USE-flags can also have comma-separated lists of
string for their values. These values are separated
by a single command, not a comma–space-separated.
Standard string list-I_USE-flags include:

@table @env
@item I_USE_LOCALE
List of locates to install for the programs. These
should be in order of preference incase the package
hard-compiles a language into the binaries.

@item I_USE_TOOLKIT
Ordered list of prefered graphical toolkits for the
program to use. For example: if the value is
`gtk2,qt5,gtk3' and the program supports Qt 5 and
GTK+ 3, but not GTK+ 2, the program should be
compiled to use Qt 5.

@item I_USE_DISPLAY
List of display servers the user is using.
@end table

Features are best added as extensions rather than
I_USE-flags, because it always for checking by
dependency. However if that is not necessary,
they could be specified with I_USE-flags.
For example, if you do not use WiFi, no packages
will need it so their is not reason to add it
as an extension. Standard feature
inclusion-I_USE-flags include, many of them
are booleanic:

@table @env
@item I_USE_INFRARED
If set to false, the scroll should avoid enabling
support for infrared.

@item I_USE_BLUETOOTH
If set to false, the scroll should avoid enabling
support for Bluetooth.

@item I_USE_WIFI
If set to false, the scroll should avoid enabling
support for WiFi.

@item I_USE_INTERNET
If set to false, the scroll should try to disable
features requiring Internet connectivitiy.
This is useful if your computer does not have
Internet connectivity.

@item I_USE_NETWORK
If set to false, the scroll should try to disable
features requiring a computer network.
Perhaps it is the only computer on the network.

@item I_USE_BACKLIGHT
If set to false, none of the computer's monitors
have backlighting.

@item I_USE_AUDIO
If set to false, the scroll should try to disable
features requiring audio.
Perhaps the computer is a server in a server-farm.

@item I_USE_CD
List of CD features you want, - for none. Possible
value include: read, write, rewrite, clone, play
and rip.

@item I_USE_DVD
List of DVD features you want, - for none. Possible
value include: read, write, rewrite, clone, play
and rip.

@item I_USE_HDDVD
List of HDDVD features you want, - for none. Possible
value include: read, write, rewrite, clone, play
and rip.

@item I_USE_BLURAY
List of Blu-ray features you want, - for none.
Possible value include: read, write, rewrite, clone,
play and rip.
@end table

@command{spike} does not provide any interface for
learning about which I_USE-flags a scroll support,
how it interprets the flags or what their default
values are. Rather, you should open the scroll
in the ports tree with your text edit and read
the scroll manually. Parsing of I_USE-flags should
be at the top of the scroll directly below the
copyright notice and the Python-module imports.



@node Scroll specifications
@chapter Scroll specifications

Scrolls are descriptor for packages that contain
metainformation and installation instruction,
as a few other instructions.

Scrolls are non-executable Python 3 scripts. They
are used by @command{spike} by importing them
rather than executabling them.

It is customary for scrolls to be licensed under
the GNU All Permissive License, exception are
however allowed as long as the license is a
Free Software licenses and is not contract based.

Scrolls should being with a line that tells
the text editors that the file is a Python file.

Scroll licensed under GNU All Permissive License
will start with:

@example
# -*- python -*-
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.  [GNUAllPermissive]
@end example

Additionally, scrolls uses a module named
`dragonsuite' shipped with @command{spike}.
So the next line in a scroll is generally:

@example
from dragonsuite import *
@end example

dragonsuite is written to make the scrolls more
similar to shell scripts. It also includes custom
functions that are common for scrolls, such as
running @command{install-info} for all info
manuals installed by the scroll, without having
to list those files. When writing a scroll it is
recommened to try to stick to dragonsuite. It is
also discouraged to use more advanced functions
and language features built into Python.

A scrollfile must be named as its package name
followed by `.scroll'. An example shot for a
package must be named as the scrolls package
name followed by `.png'; only Portable Network
Graphics files are allowed. Additional files,
such as patches, required by the scroll that
is not available upstream must be named as
the scroll's package name followed by `@@'
and then something that describes or otherwise
identifies the file. However, here `=' followed
by the version of the package may be added
to the package name if the scroll installs
an older version of the package than the scroll
without this installs.

A scroll must declare a set of variable, and
may declare some other variable:

@table @var
@item pkgname
The name of the packages, must only contain lower case
letter, digits, plus signs, underscores, dots and hyphens.
The name may not start with a hyphen or a dot. The length
of the name must not exceed 64 characters.

@item pkgver
The version of the software as released from the author.
This string only contain lower case letter, digits, plus
signs, underscores and dots.

@item pkgrel
The release number of the scroll, reset to 1 when
@var{pkgver} is updated. This value is an integer and
default to the value 1.

@item epoch
Increase by one if the package version is lower than the
previous. That is, if the new package versioning system
breaks version comparison logic. This value is an integer
and default to the value 0.

@item pkgdesc
Brief description of the package, keep it on one line and
try not to use the package's name.

@item upstream
The URL that is associated with the software being packaged.
Typically the project's website.

@item arch
List of known microarchitecture compatibilities. The
architecture's name for compatible, but prepended with an
exclamation mark for not compatible. The architecture names
are in lowercase. If architecture independent, the only
architecture should be `any`. For example:
@code{arch = ['ia-32', '!x86_64']} for supported by
IA-32@footnote{Sometimes called i386 through metonymy.} but
not by x86_64, or @code{arch = ['any']} if microarchitecture
independent.

@item freedom
An integer value constructed from the bitwise OR of
named constants. These constants are:
@table @code
@item SOFTWARE
This is a macro for
@code{SOFTWARE_SHAREABLE | SOFTWARE_COMMERCIAL | SOFTWARE_DERIVATIVE}.
It should be used if the software and all required resouce files are free,
or if no such files are included in the package.

@item MEDIA
This is a macro for
@code{MEDIA_SHAREABLE | MEDIA_COMMERCIAL | MEDIA_DERIVATIVE}.
It should be used if the all merely augmented media files to the
software, or if all files for a media package, is free or if no
such files are included in the package.

@item SOFTWARE_SHAREABLE
This flag should be used if the files covered by @code{SOFTWARE}
are shareable. Thas is, they can be used any purpose and can be
redistributed without a fee, however possibly not in a commercial
context.

@item MEDIA_SHAREABLE
This flag should be used if the files covered by @code{MEDIA}
are shareable. Thas is, they can be used any purpose and can be
redistributed without a fee, however possibly not in a commercial
context.

@item SOFTWARE_COMMERCIAL
This flag should be used if the files covered by @code{SOFTWARE}
can be commercially redistributed without a fee.

@item MEDIA_COMMERCIAL
This flag should be used if the files covered by @code{MEDIA}
can be commercially redistributed without a fee.

@item SOFTWARE_DERIVATIVE
This flag should be used if derivatives of the files covered
by @code{SOFTWARE} are can be redistributed without a fee.
Derivative files may only be commerically redistributed if
@code{SOFTWARE_COMMERCIAL} is also used.

@item MEDIA_DERIVATIVE
This flag should be used if derivatives of the files covered
by @code{MEDIA} are can be redistributed without a fee.
Derivative files may only be commerically redistributed if
@code{MEDIA_COMMERCIAL} is also used.

@item TRADEMARKED
This flag should be used if there is trademark protections
in the package, keep in mind that outside the U.S. it may not
be necessary to use symbols to indicate such protections.

@item PATENTED
This flag should be used if the package contains patented
information, or patent pending information if the patent
is filed in a jurisdiction where it does not void the
patent to publish the information with a patent is pending.
@end table

If none of these flags fit you should use the value 0.

@item license
A list of licenses that applies to the installed parts
of the package. The license name should be abbreviated
in accordance to the license's name in
@file{/usr/share/licenses/common}@footnote{Installed
by the package @command{licenses}}. If the license
is not included in this directory it should be prefixed
with `custom:'. However if the licenses is specific to
the package `custom' should be used. You can also declare
what part of the package a license cover, this is done by
adding a short text after the license name delimited by
`: '. For example @command{'FDL1.3: manual'} if the
manual included in the package is licenses under GNU
Free Documentation License version 1.3.

@item metalicense
This variable is optionally, if not specified, you can
either leave it undeclared or set it to @code{None}.
If specified to must be a list of the same length as
@var{license}. The n:th element is this list is a
metainformation descriptor for the n:th license in
@var{license}. If you want to omit this for a license
you can set the corresponding element in this list to
@code{None}. Included license metainformation is
described by a 2-tuple, where the first element is
as an integer constructed from name constants that
describes that features the licese has. The second
element in the tuple specifies what is know in the
same what it must contain at least the same flags
as the first element. For example:
@example
license = ['custom:fictional', 'nBSD']
metalicense = [(SHAREABLE, SHAREABLE | DERIVATIVE), None]
@end example
means that the license `fictional' makes the work
shareable but does not allow redistribution of
derivatives without a fee, and that no other
metainformation about `fictional' is known and
that no information about `nBSD' is known is known.

The flags can be used for these values are:
@table @code
@item NO_TRADEMARKS
The license prohibits trademark protection.

@item NO_PATENTS
The license patent protection.

@item CONTRACT_BASED
The license is contract based, you need to
agree to it before you use the package.

@item SHAREABLE
The covered work can be used for any purpose
and can be redistributed without a fee.

@item COMMERCIAL
The covered work can be commercially
redistributed without a fee.

@item DERIVATIVE
Derivative work can be redistributed without a
fee. Derivative work can be redistributed
commerically if and only if @code{COMMERCIAL}
is used.

@item FSF_APPROVED
The license is approved by the Free Software Foundation.

@item OSI_APPROVED
The license is approved by the Open Source Initiative.

@item GPL_COMPATIBLE
The license if GNU General Publice License compatible.

@item COPYLEFT
The license is a copyleft license.
@end table

@item private
An integer value that should be either of the following
values:

@table @code
@item UNSUPPORTED
The package cannot be installed with the
@option{--private} option.

@item SUPPORTED
The package may be installed with the
@option{--private} option.

@item MANDITORY
The package must be installed with the
@option{--private} option.
@end table

@code{UNSUPPORTED} is assumed if this variable is not
declared.

@item interactive
This variable can be set to either @code{True} or
@code{False}, if not specified @code{False} is used.
Should be set to @code{True} if installation of the
package requires interaction, which you should go out
of your way to avoid. This is for example needed
if a licenses used by the package is contract based.

@item conflicts
If the package cannot be installed on the system
at the same time as some other scrolls, this variable
should be declared and list the those packages.

@item replaces
If the package is replacement for some other scrolls,
or uses the new name for a package, this variable
should be declared and list the old packages.

@item provides
This is an optional list of virtual packages provided
by the package. Virtual packages can be commands
such as @command{sh} that multiple package can provide
or another package.

@item extension
This variable should be declared and name a package
that this package extends if the package is meaningless
without that package. This implies runtime dependency
upon the named package.

For example:
@example
pkgname = 'emacs-xyz-mode'
extension = 'emacs'
@end example

@item variant
Package that the package is an variant of, may or may not be
installed at the same time. It is implied that the package
provides the package of which it is an variant. If the package
is not a variant of another package it should not declare
this variant, or give it the value @code{None}.

For example:
@example
pkgname = 'ponysay+nonfree'
variant = 'ponysay'
@end example

@item patches
Package that the package patches when that package is built.
This variable is optional.

For example:
@example
pkgname = 'xorg-server-hwcursor-gamma'
patches = 'xorg-server'
@end example

@item reason
Reason why the scroll has been placed in its current repository.
This variable is optional but should be used on all scrolls in
the `limbo' repository.

For example:
@example
# rssyl.scroll in limbo:
pkgname = 'rssyl'
extension = 'claws-mail'
reason = 'rssyl has been merged into mainline claws-mail'

# claws-mail.scroll:
pkgname = 'claws-mail'
replaces = ['rssyl']
provides = ['rssyl']
@end example

@item patchbefore
Other patches the patch must be applied before.

@item patchafter
Other patches that must be applied before the patch.

@item groups
Package groups to which the package belongs, symbolic names that
allow installation of multiple packages by specifying one name.

@item depends
Packages required by the package at runtime,
may be omitted if none.

@item makedepends
Packages required by the package at maketime,
may be omitted if none.

@item checkdepends
Packages required by the package at checktime,
may be omitted if none. All dependencies in makedepends
are automatically included.

@item optdepends
Optional packages that add functionality to the package at
runtime, may be omitted if none.

A description of when the optional dependency is used
should be added after the name of the package with
a `: '-delimiter.

@item source
List of source files to downloaded, may be the filename
of a file included in the ports tree at the same directory
as the scroll. If the URL of a source file is not sufficient
a string list can be used, where the first element is the
source URL, and second element is the destination filename,
and all additional elements are arguments to add when
invoking @command{wget}.

@item optdepends
Sources that should not be extracted, may be omitted if none.

@item sha3sums
Keccak[]@footnote{That is, Keccak with the default configuration,
we use this because @command{spike} predates SHA-3's inclusion
in the Secure Hash Standard.} checksums of the source files,
must be in the same order as in @var{sources}. Use
@command{spike -3} to make sure that the checksum uses the
correct configurations. If a file does not need to be integrity
checked, @code{None} may be used instead of a checksum; this
should only be done on files that are in the ports tree.

@item backup
Pathnames of files to should be backup, may be omitted if
none. This is commonly used for files in @file{/etc}.

@item options
Override user configurations, options prepended by an
exclamation mark are turned off, others are turned on.

@table @code
@item strip
Strip symbols from binaries and libraries.
@item licenses
Keep files installed to @file{/share/licenses} with
any prefix.
@item changelogs
Keep files installed to @file{/share/changelogs} with
any prefix.
@item libtool
Leave .la-files in packages.
@item upx
Compress binary executable files using UPX.
@end table
@end table

Some of these variable may depend on I_USE-flags.

Package name, except for in @var{pkgname} have a range
of targeted versions using in the format
@code{(<|<=|>|>=|=|<>)[epoch:]pkgver} or
@code{>[=][epoch:]pkgver<[=][epoch:]pkgver}, with is
appended to the package name.

In addition to these descriptions, scrolls also contain
instructions in form of functions. It is customary to
include these functions in the order they are listed here.
However only @code{package} is always needed, but
@code{ride} should always be included, the rest should
be added as fit.

@table @code
@item ride(private)
Execute the program installed by the package,
if their is no way to do so or to know what the
user wants to do, it should print some help
information or open a manual.

@item build(startdir, srcdir, pkgdir, private)
Compile the package.

@item check(startdir, srcdir, pkgdir, private)
Check that the compiled files are correctly compiled.
Some software packages let you do this by
running @command{make check}, which in scrolls
would be @code{make('check')}.

@item package(startdir, srcdir, pkgdir, private)
Install files into @var{pkgdir} before installing to
the system.

@item patch_build(startdir, srcdir, pkgdir, private)
Apply patch to target during the target's @code{build}.

@item patch_check(startdir, srcdir, pkgdir, private)
Apply patch to target during the target's @code{check}.

@item patch_package(startdir, srcdir, pkgdir, private)
Apply patch to target during the target's @code{package}.

@item pre_install(tmpdir, rootdir, private)
This function will, if defined, be called some time
before files are installed to the system. Exactly when
is not welldefined, you cannot assume that any files
have been compiled. It is only called if the package
is not already installed.

@item post_install(tmpdir, rootdir, installedfiles, private)
This function will, if defined, be called after the files
installed by @code{package} have been transferred into
the target system. It is only called if the package was
not already installed.

@item pre_upgrade(tmpdir, rootdir, installedfiles, private)
This function is identical to @code{pre_install}, except it,
in addition to having the @var{installedfiles} parameter, will
only be called if the package is already installed.

@item post_upgrade(tmpdir, rootdir, installedfiles, private)
This function is identical to @code{post_install}, except it
will only be called if the package was already installed.

@item pre_uninstall(tmpdir, rootdir, installedfiles, private)
This function will, if defined, be called before the package
is uninstalled.

@item post_uninstall(tmpdir, rootdir, installedfiles, private)
This function will, if defined, be called when the package
has been uninstalled.
@end table

For all of these functions, that has these variables:

@table @var
@item startdir
The parent directory for @var{srcdir} and
@var{pkgdir}.

@item srcdir
The root directory of the source file. Files
extracted from source files are stored here
as well as downloaded files, included the
extracted archives, and listed files from
the ports tree.

@item pkgdir
The root directory of the installed files.
Files are installed here by the scroll and
then moved into @file{/} by @command{spike}.
Makefiles often have a variable named
@var{DESTDIR} that should be set to have
this as its value.

@item tmpdir
A directory you may use to store temporary
files during the function call.

@item rootdir
The target system's root directory's mountpoint
on the host system.

@item installedfiles
A list of all files installed by the scroll.

For @code{post_install} and @code{post_upgrade}
this will be the files installed by the new
version of the scroll, for other functions it
will be the files installed by the old version
of the scroll.

@item private
Will be set to @code{True} if the package is
installed or is being installed as a user-private
package, otherwise it will be set to @code{False}.
@end table

Neither of these function have any return value, on error
an exception should be risen.

Variables and functions used by the scroll and that is not
covered by this specification should started with an `_'
to avoid name conflicts with @command{spike}.

It is customary to have the following order of inclusion
for content in a scroll:

@itemize
@item
Reading of I_USE-flags.
@item
Parsing of I_USE-flags.
@item
Scroll descriptors (variables) and help variables.
@item
Help functions.
@item
Scroll instructions (functions).
@end itemize




@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include fdl.texinfo

@bye

